#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct Stack {
    char *data;
    int top;
    int size;
} Stack;

Stack *create_stack(int size) {
    Stack *stack = (Stack *)malloc(sizeof(Stack));
    stack->data = (char *)malloc(sizeof(char) * size);
    stack->top = -1;
    stack->size = size;
    return stack;
}

int is_empty(Stack *stack) {
    return stack->top == -1;
}

void push(Stack *stack, char item) {
    if (stack->top == stack->size - 1) {
        printf("Stack overflow!\n");
        exit(1);
    }
    stack->top++;
    stack->data[stack->top] = item;
}

char pop(Stack *stack) {
    if (is_empty(stack)) {
        printf("Stack underflow!\n");
        exit(1);
    }
    char item = stack->data[stack->top];
    stack->top--;
    return item;
}

int is_palindrome(char *str) {
    int len = strlen(str);
    Stack *stack = create_stack(len);

    // Push characters till the middle of the string
    for (int i = 0; i < len / 2; i++) {
        push(stack, str[i]);
    }

    // Skip middle character for odd length strings
    if (len % 2 == 1) {
        i++;
    }

    // Compare characters from the second half of the string
    while (i < len) {
        if (pop(stack) != str[i]) {
            return 0;
        }
        i++;
    }

    free(stack->data);
    free(stack);
    return 1;
}

int main() {
    char str[100];

    printf("Enter a string: ");
    scanf("%s", str);

    if (is_palindrome(str)) {
        printf("%s is a palindrome.\n", str);
    } else {
        printf("%s is not a palindrome.\n", str);
    }

    return 0;
    }

  
